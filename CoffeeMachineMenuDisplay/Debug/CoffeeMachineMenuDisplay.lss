
CoffeeMachineMenuDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800144  00800144  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4c  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000697  00000000  00000000  000024a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 34       	cpi	r26, 0x44	; 68
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e4       	ldi	r26, 0x44	; 68
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 34       	cpi	r26, 0x49	; 73
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  8a:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
void lcd_NumPrint(int);
void lcd_print(char*);
int checkMode();
*/
void lcd_cmd(uint8_t cmd) {
	__lcdport_ = cmd;
  92:	8b bb       	out	0x1b, r24	; 27
	cmd_mode();
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	85 bb       	out	0x15, r24	; 21
	enable_high();
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9f e1       	ldi	r25, 0x1F	; 31
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_cmd+0x18>
  aa:	00 00       	nop
	_delay_ms(2);
	enable_low();
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	08 95       	ret

000000b4 <lcd_data>:
}
void lcd_data(uint8_t data) {
	__lcdport_ = data;
  b4:	8b bb       	out	0x1b, r24	; 27
	data_mode();
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	85 bb       	out	0x15, r24	; 21
	enable_high();
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9f e1       	ldi	r25, 0x1F	; 31
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_data+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_data+0x18>
  cc:	00 00       	nop
	_delay_ms(2);
	enable_low();
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	08 95       	ret

000000d6 <__init_lcd_>:
}
void __init_lcd_() {
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <__init_lcd_+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <__init_lcd_+0xa>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <__init_lcd_+0xc>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t commands[] = {
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	e5 e7       	ldi	r30, 0x75	; 117
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	de 01       	movw	r26, r28
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	8a 95       	dec	r24
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__init_lcd_+0x1a>
		0x01,
		0x06,
		0x0F,
		0xC0
	};
	for(uint8_t i=0; i<6;i++) {
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	10 c0       	rjmp	.+32     	; 0x11c <__init_lcd_+0x46>
		lcd_cmd(commands[i]);
  fc:	e1 e0       	ldi	r30, 0x01	; 1
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ec 0f       	add	r30, r28
 102:	fd 1f       	adc	r31, r29
 104:	e1 0f       	add	r30, r17
 106:	f1 1d       	adc	r31, r1
 108:	80 81       	ld	r24, Z
 10a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__init_lcd_+0x3c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__init_lcd_+0x42>
 118:	00 00       	nop
		0x01,
		0x06,
		0x0F,
		0xC0
	};
	for(uint8_t i=0; i<6;i++) {
 11a:	1f 5f       	subi	r17, 0xFF	; 255
 11c:	16 30       	cpi	r17, 0x06	; 6
 11e:	70 f3       	brcs	.-36     	; 0xfc <__init_lcd_+0x26>
		lcd_cmd(commands[i]);
		_delay_ms(5);
	}
}
 120:	26 96       	adiw	r28, 0x06	; 6
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <lcd_print>:
void lcd_print(char* p) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	while(*p != '\0') {
 13a:	03 c0       	rjmp	.+6      	; 0x142 <lcd_print+0xe>
		lcd_data(*p);
 13c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_data>
		p++;
 140:	21 96       	adiw	r28, 0x01	; 1
		lcd_cmd(commands[i]);
		_delay_ms(5);
	}
}
void lcd_print(char* p) {
	while(*p != '\0') {
 142:	88 81       	ld	r24, Y
 144:	81 11       	cpse	r24, r1
 146:	fa cf       	rjmp	.-12     	; 0x13c <lcd_print+0x8>
		lcd_data(*p);
		p++;
	}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_curPos>:
void lcd_curPos(uint8_t row, uint8_t col) {
	if(row == 0) {
 14e:	81 11       	cpse	r24, r1
 150:	05 c0       	rjmp	.+10     	; 0x15c <lcd_curPos+0xe>
		//cursor in top row
		lcd_cmd(begLine1+col);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	86 0f       	add	r24, r22
 156:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 15a:	08 95       	ret
	}
	else if(row == 1) {
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	21 f4       	brne	.+8      	; 0x168 <lcd_curPos+0x1a>
		//cursor in bottom row
		lcd_cmd(begLine2+col);
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	86 0f       	add	r24, r22
 164:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 168:	08 95       	ret

0000016a <lcd_NumPrint>:
	}
}
void lcd_NumPrint(int a) {
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	4c 01       	movw	r8, r24
	lcd_cmd(clearLCD);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9f e1       	ldi	r25, 0x1F	; 31
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_NumPrint+0x20>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_NumPrint+0x26>
 190:	00 00       	nop
	_delay_ms(2);
	uint32_t q,r;
	q=a;
 192:	09 2c       	mov	r0, r9
 194:	00 0c       	add	r0, r0
 196:	aa 08       	sbc	r10, r10
 198:	bb 08       	sbc	r11, r11
	int i=0;
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	while(q) {
 19e:	1a c0       	rjmp	.+52     	; 0x1d4 <lcd_NumPrint+0x6a>
		r=q%10;
		q=q/10;
 1a0:	c5 01       	movw	r24, r10
 1a2:	b4 01       	movw	r22, r8
 1a4:	2a e0       	ldi	r18, 0x0A	; 10
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodsi4>
 1b0:	49 01       	movw	r8, r18
 1b2:	5a 01       	movw	r10, r20
		r+=48;
 1b4:	6b 01       	movw	r12, r22
 1b6:	7c 01       	movw	r14, r24
 1b8:	20 e3       	ldi	r18, 0x30	; 48
 1ba:	c2 0e       	add	r12, r18
 1bc:	d1 1c       	adc	r13, r1
 1be:	e1 1c       	adc	r14, r1
 1c0:	f1 1c       	adc	r15, r1
		lcd_curPos(1,15-i);
 1c2:	6f e0       	ldi	r22, 0x0F	; 15
 1c4:	6c 1b       	sub	r22, r28
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
		lcd_data((uint8_t)r);
 1cc:	8c 2d       	mov	r24, r12
 1ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_data>
		i++;
 1d2:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd(clearLCD);
	_delay_ms(2);
	uint32_t q,r;
	q=a;
	int i=0;
	while(q) {
 1d4:	81 14       	cp	r8, r1
 1d6:	91 04       	cpc	r9, r1
 1d8:	a1 04       	cpc	r10, r1
 1da:	b1 04       	cpc	r11, r1
 1dc:	09 f7       	brne	.-62     	; 0x1a0 <lcd_NumPrint+0x36>
		r+=48;
		lcd_curPos(1,15-i);
		lcd_data((uint8_t)r);
		i++;
	}
	lcd_curPos(1,15-i);
 1de:	6f e0       	ldi	r22, 0x0F	; 15
 1e0:	6c 1b       	sub	r22, r28
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	08 95       	ret

000001fe <lcd_FloatingPrint>:
			lcd_NumPrint(coffee_types[item].price);
			_delay_ms(1000);
		}*/
    }
}
void lcd_FloatingPrint(char* txt) {
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	60 97       	sbiw	r28, 0x10	; 16
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	8c 01       	movw	r16, r24
	char dispArr[16];
	uint8_t mainIndex=0;
 21a:	f1 2c       	mov	r15, r1
	char* dispText;

	while(mainIndex<47) {
 21c:	3a c0       	rjmp	.+116    	; 0x292 <lcd_FloatingPrint+0x94>
		dispText = txt;
			for(uint8_t i=0;i<16;i++) {
				if(dispText){dispArr[i] = *dispText++;}
 21e:	30 97       	sbiw	r30, 0x00	; 0
 220:	51 f0       	breq	.+20     	; 0x236 <lcd_FloatingPrint+0x38>
 222:	90 81       	ld	r25, Z
 224:	a1 e0       	ldi	r26, 0x01	; 1
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	ac 0f       	add	r26, r28
 22a:	bd 1f       	adc	r27, r29
 22c:	a8 0f       	add	r26, r24
 22e:	b1 1d       	adc	r27, r1
 230:	9c 93       	st	X, r25
 232:	31 96       	adiw	r30, 0x01	; 1
 234:	08 c0       	rjmp	.+16     	; 0x246 <lcd_FloatingPrint+0x48>
				else{dispArr[i]=' ';}
 236:	a1 e0       	ldi	r26, 0x01	; 1
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	ac 0f       	add	r26, r28
 23c:	bd 1f       	adc	r27, r29
 23e:	a8 0f       	add	r26, r24
 240:	b1 1d       	adc	r27, r1
 242:	90 e2       	ldi	r25, 0x20	; 32
 244:	9c 93       	st	X, r25
	uint8_t mainIndex=0;
	char* dispText;

	while(mainIndex<47) {
		dispText = txt;
			for(uint8_t i=0;i<16;i++) {
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	02 c0       	rjmp	.+4      	; 0x24e <lcd_FloatingPrint+0x50>
 24a:	f8 01       	movw	r30, r16
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	80 31       	cpi	r24, 0x10	; 16
 250:	30 f3       	brcs	.-52     	; 0x21e <lcd_FloatingPrint+0x20>
				if(dispText){dispArr[i] = *dispText++;}
				else{dispArr[i]=' ';}
			}
			lcd_print(dispArr);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
			if(mainIndex!=0) {
 25a:	ff 20       	and	r15, r15
 25c:	51 f0       	breq	.+20     	; 0x272 <lcd_FloatingPrint+0x74>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	9c e0       	ldi	r25, 0x0C	; 12
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <lcd_FloatingPrint+0x66>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_FloatingPrint+0x70>
 26e:	00 00       	nop
 270:	09 c0       	rjmp	.+18     	; 0x284 <lcd_FloatingPrint+0x86>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ed       	ldi	r24, 0xD3	; 211
 276:	90 e3       	ldi	r25, 0x30	; 48
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <lcd_FloatingPrint+0x7a>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_FloatingPrint+0x84>
 282:	00 00       	nop
				_delay_ms(250);	
			}
			else {
				_delay_ms(1000);
			}
			lcd_curPos(1,0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
			mainIndex++;
 28c:	f3 94       	inc	r15
			txt++;
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_FloatingPrint(char* txt) {
	char dispArr[16];
	uint8_t mainIndex=0;
	char* dispText;

	while(mainIndex<47) {
 292:	2e e2       	ldi	r18, 0x2E	; 46
 294:	2f 15       	cp	r18, r15
 296:	c8 f6       	brcc	.-78     	; 0x24a <lcd_FloatingPrint+0x4c>
			}
			lcd_curPos(1,0);
			mainIndex++;
			txt++;
	}
}
 298:	60 96       	adiw	r28, 0x10	; 16
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	08 95       	ret

000002b0 <menu_nav>:
int menu_nav() {
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
	uint8_t choice = 0,navIndex=0;
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(!choice) {
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <menu_nav+0x76>
		if(_switch_up_){navIndex++;while(_switch_up_);}
 2ba:	b7 99       	sbic	0x16, 7	; 22
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <menu_nav+0x16>
 2be:	cf 5f       	subi	r28, 0xFF	; 255
 2c0:	b7 9b       	sbis	0x16, 7	; 22
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <menu_nav+0x10>
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <menu_nav+0x20>
		else if(_switch_down_) {navIndex--;while(_switch_down_);}
 2c6:	b6 99       	sbic	0x16, 6	; 22
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <menu_nav+0x20>
 2ca:	c1 50       	subi	r28, 0x01	; 1
 2cc:	b6 9b       	sbis	0x16, 6	; 22
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <menu_nav+0x1c>
		if(navIndex>6){navIndex=0;}
 2d0:	c7 30       	cpi	r28, 0x07	; 7
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <menu_nav+0x26>
 2d4:	cd 2f       	mov	r28, r29
		lcd_curPos(1,0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
		lcd_print(coffee_types[navIndex].coffee_name);		
 2de:	8c 2f       	mov	r24, r28
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	8e 0f       	add	r24, r30
 2ea:	9f 1f       	adc	r25, r31
 2ec:	fc 01       	movw	r30, r24
 2ee:	e0 5a       	subi	r30, 0xA0	; 160
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	80 81       	ld	r24, Z
 2f4:	91 81       	ldd	r25, Z+1	; 0x01
 2f6:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
		while(!_switch_up_ & !_switch_down_ & !_switch_ok_);
 2fa:	86 b3       	in	r24, 0x16	; 22
 2fc:	96 b3       	in	r25, 0x16	; 22
 2fe:	96 fb       	bst	r25, 6
 300:	99 27       	eor	r25, r25
 302:	90 f9       	bld	r25, 0
 304:	88 1f       	adc	r24, r24
 306:	88 27       	eor	r24, r24
 308:	88 1f       	adc	r24, r24
 30a:	89 23       	and	r24, r25
 30c:	96 b3       	in	r25, 0x16	; 22
 30e:	95 fb       	bst	r25, 5
 310:	99 27       	eor	r25, r25
 312:	90 f9       	bld	r25, 0
 314:	88 23       	and	r24, r24
 316:	11 f0       	breq	.+4      	; 0x31c <menu_nav+0x6c>
 318:	91 11       	cpse	r25, r1
 31a:	ef cf       	rjmp	.-34     	; 0x2fa <menu_nav+0x4a>
		if(_switch_ok_){choice=navIndex;while(_switch_ok_);}
 31c:	b5 99       	sbic	0x16, 5	; 22
 31e:	03 c0       	rjmp	.+6      	; 0x326 <menu_nav+0x76>
 320:	b5 9b       	sbis	0x16, 5	; 22
 322:	fe cf       	rjmp	.-4      	; 0x320 <menu_nav+0x70>
 324:	dc 2f       	mov	r29, r28
	}
}
int menu_nav() {
	uint8_t choice = 0,navIndex=0;
	
	while(!choice) {
 326:	dd 23       	and	r29, r29
 328:	41 f2       	breq	.-112    	; 0x2ba <menu_nav+0xa>
		lcd_print(coffee_types[navIndex].coffee_name);		
		while(!_switch_up_ & !_switch_down_ & !_switch_ok_);
		if(_switch_ok_){choice=navIndex;while(_switch_ok_);}
	}
	return choice;
 32a:	8d 2f       	mov	r24, r29
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <main>:
uint8_t sw_up = 0;
void lcd_FloatingPrint(char*);
int menu_nav();
int main(void)
{	
	set_all(DDRA);
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	8a bb       	out	0x1a, r24	; 26
	set_all(DDRC);
 338:	84 bb       	out	0x14, r24	; 20
	clr_all(DDRB);
 33a:	17 ba       	out	0x17, r1	; 23
	set_pin(PORTB,PINB7);
 33c:	88 b3       	in	r24, 0x18	; 24
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	88 bb       	out	0x18, r24	; 24
	set_pin(PORTB,PINB6);
 342:	88 b3       	in	r24, 0x18	; 24
 344:	80 64       	ori	r24, 0x40	; 64
 346:	88 bb       	out	0x18, r24	; 24
	set_pin(PORTB,PINB5);
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	88 bb       	out	0x18, r24	; 24
	
	modes wlcm,menu,cnfrm;
	
	wlcm.mode_name = "Welcome!";
	wlcm.mode_status = valid;
 34e:	d1 e0       	ldi	r29, 0x01	; 1
	
	menu.mode_name = "Menu";
	menu.mode_status = invalid;
 350:	c0 e0       	ldi	r28, 0x00	; 0
	
	cnfrm.mode_name = "Confirm order?";
	cnfrm.mode_status = invalid;
 352:	10 e0       	ldi	r17, 0x00	; 0
	
	__init_lcd_();
 354:	0e 94 6b 00 	call	0xd6	; 0xd6 <__init_lcd_>
	int selection = -1;
	previtem=item;
 358:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <item>
 35c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <item+0x1>
 360:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <previtem+0x1>
 364:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <previtem>
	
	cnfrm.mode_name = "Confirm order?";
	cnfrm.mode_status = invalid;
	
	__init_lcd_();
	int selection = -1;
 368:	ee 24       	eor	r14, r14
 36a:	ea 94       	dec	r14
 36c:	fe 2c       	mov	r15, r14
	previtem=item;
    while (1)  
    {
		//--main framework for the vending machine--
		if(wlcm.mode_status == valid){
 36e:	d1 30       	cpi	r29, 0x01	; 1
 370:	51 f4       	brne	.+20     	; 0x386 <main+0x52>
			lcd_FloatingPrint("Welcome!        A project by Yashesvi(happikin)                ");
 372:	8b e7       	ldi	r24, 0x7B	; 123
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_FloatingPrint>
			lcd_cmd(clearLCD);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			wlcm.mode_status = invalid;
 380:	d0 e0       	ldi	r29, 0x00	; 0
			menu.mode_status = valid;
 382:	c1 e0       	ldi	r28, 0x01	; 1
 384:	2e c0       	rjmp	.+92     	; 0x3e2 <main+0xae>
		}
		else if(menu.mode_status == valid) {
 386:	c1 30       	cpi	r28, 0x01	; 1
 388:	b1 f4       	brne	.+44     	; 0x3b6 <main+0x82>
			lcd_print("make a selection");
 38a:	8b eb       	ldi	r24, 0xBB	; 187
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	8b e7       	ldi	r24, 0x7B	; 123
 396:	92 e9       	ldi	r25, 0x92	; 146
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x64>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x6e>
 3a2:	00 00       	nop
			_delay_ms(3000);
			selection = menu_nav();
 3a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <menu_nav>
 3a8:	7c 01       	movw	r14, r24
			lcd_cmd(clearLCD);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			//if menu selection is done then 
			menu.mode_status = invalid;
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
			cnfrm.mode_status = valid;
 3b2:	11 e0       	ldi	r17, 0x01	; 1
 3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <main+0xae>
		}
		else if(cnfrm.mode_status == valid) {
 3b6:	11 30       	cpi	r17, 0x01	; 1
 3b8:	a1 f4       	brne	.+40     	; 0x3e2 <main+0xae>
			lcd_cmd(clearLCD);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_NumPrint(selection);
 3c0:	c7 01       	movw	r24, r14
 3c2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_NumPrint>
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	8f e4       	ldi	r24, 0x4F	; 79
 3ca:	93 ec       	ldi	r25, 0xC3	; 195
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x98>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0xa2>
 3d6:	00 00       	nop
			_delay_ms(4000);
			lcd_cmd(clearLCD);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			//if confirmed the selection then
			//display thank you!
			// if declined then
			cnfrm.mode_status = invalid;
 3de:	10 e0       	ldi	r17, 0x00	; 0
			menu.mode_status = valid;
 3e0:	c1 e0       	ldi	r28, 0x01	; 1
		}		
		//- - - - - - - - - - - - - - - - - - - - -
		
		
		
		if(_switch_up_) {
 3e2:	b7 99       	sbic	0x16, 7	; 22
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <main+0xba>
			sw_up  = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 3ec:	c0 cf       	rjmp	.-128    	; 0x36e <main+0x3a>
		}
		else {
			sw_up = 0;
 3ee:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 3f2:	bd cf       	rjmp	.-134    	; 0x36e <main+0x3a>

000003f4 <__udivmodsi4>:
 3f4:	a1 e2       	ldi	r26, 0x21	; 33
 3f6:	1a 2e       	mov	r1, r26
 3f8:	aa 1b       	sub	r26, r26
 3fa:	bb 1b       	sub	r27, r27
 3fc:	fd 01       	movw	r30, r26
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__udivmodsi4_ep>

00000400 <__udivmodsi4_loop>:
 400:	aa 1f       	adc	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	ee 1f       	adc	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	a2 17       	cp	r26, r18
 40a:	b3 07       	cpc	r27, r19
 40c:	e4 07       	cpc	r30, r20
 40e:	f5 07       	cpc	r31, r21
 410:	20 f0       	brcs	.+8      	; 0x41a <__udivmodsi4_ep>
 412:	a2 1b       	sub	r26, r18
 414:	b3 0b       	sbc	r27, r19
 416:	e4 0b       	sbc	r30, r20
 418:	f5 0b       	sbc	r31, r21

0000041a <__udivmodsi4_ep>:
 41a:	66 1f       	adc	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a 94       	dec	r1
 424:	69 f7       	brne	.-38     	; 0x400 <__udivmodsi4_loop>
 426:	60 95       	com	r22
 428:	70 95       	com	r23
 42a:	80 95       	com	r24
 42c:	90 95       	com	r25
 42e:	9b 01       	movw	r18, r22
 430:	ac 01       	movw	r20, r24
 432:	bd 01       	movw	r22, r26
 434:	cf 01       	movw	r24, r30
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
