
CoffeeMachineMenuDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800176  00800176  000006a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0a  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000626  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e2  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
void lcd_NumPrint(int);
void lcd_print(char*);
int checkMode();
*/
void lcd_cmd(uint8_t cmd) {
	__lcdport_ = cmd;
  92:	8b bb       	out	0x1b, r24	; 27
	cmd_mode();
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	85 bb       	out	0x15, r24	; 21
	enable_high();
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9f e1       	ldi	r25, 0x1F	; 31
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_cmd+0x18>
  aa:	00 00       	nop
	_delay_ms(2);
	enable_low();
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	08 95       	ret

000000b4 <lcd_data>:
}
void lcd_data(uint8_t data) {
	__lcdport_ = data;
  b4:	8b bb       	out	0x1b, r24	; 27
	data_mode();
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	85 bb       	out	0x15, r24	; 21
	enable_high();
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9f e1       	ldi	r25, 0x1F	; 31
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_data+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_data+0x18>
  cc:	00 00       	nop
	_delay_ms(2);
	enable_low();
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	08 95       	ret

000000d6 <__init_lcd_>:
}
void __init_lcd_() {
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <__init_lcd_+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <__init_lcd_+0xa>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <__init_lcd_+0xc>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t commands[] = {
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	e5 e7       	ldi	r30, 0x75	; 117
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	de 01       	movw	r26, r28
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	8a 95       	dec	r24
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__init_lcd_+0x1a>
		0x01,
		0x06,
		0x0F,
		0xC0
	};
	for(uint8_t i=0; i<6;i++) {
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	10 c0       	rjmp	.+32     	; 0x11c <__init_lcd_+0x46>
		lcd_cmd(commands[i]);
  fc:	e1 e0       	ldi	r30, 0x01	; 1
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ec 0f       	add	r30, r28
 102:	fd 1f       	adc	r31, r29
 104:	e1 0f       	add	r30, r17
 106:	f1 1d       	adc	r31, r1
 108:	80 81       	ld	r24, Z
 10a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__init_lcd_+0x3c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__init_lcd_+0x42>
 118:	00 00       	nop
		0x01,
		0x06,
		0x0F,
		0xC0
	};
	for(uint8_t i=0; i<6;i++) {
 11a:	1f 5f       	subi	r17, 0xFF	; 255
 11c:	16 30       	cpi	r17, 0x06	; 6
 11e:	70 f3       	brcs	.-36     	; 0xfc <__init_lcd_+0x26>
		lcd_cmd(commands[i]);
		_delay_ms(5);
	}
}
 120:	26 96       	adiw	r28, 0x06	; 6
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <lcd_print>:
void lcd_print(char* p) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	while(*p != '\0') {
 13a:	03 c0       	rjmp	.+6      	; 0x142 <lcd_print+0xe>
		lcd_data(*p);
 13c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_data>
		p++;
 140:	21 96       	adiw	r28, 0x01	; 1
		lcd_cmd(commands[i]);
		_delay_ms(5);
	}
}
void lcd_print(char* p) {
	while(*p != '\0') {
 142:	88 81       	ld	r24, Y
 144:	81 11       	cpse	r24, r1
 146:	fa cf       	rjmp	.-12     	; 0x13c <lcd_print+0x8>
		lcd_data(*p);
		p++;
	}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_curPos>:
void lcd_curPos(uint8_t row, uint8_t col) {
	if(row == 0) {
 14e:	81 11       	cpse	r24, r1
 150:	05 c0       	rjmp	.+10     	; 0x15c <lcd_curPos+0xe>
		//cursor in top row
		lcd_cmd(begLine1+col);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	86 0f       	add	r24, r22
 156:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 15a:	08 95       	ret
	}
	else if(row == 1) {
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	21 f4       	brne	.+8      	; 0x168 <lcd_curPos+0x1a>
		//cursor in bottom row
		lcd_cmd(begLine2+col);
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	86 0f       	add	r24, r22
 164:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 168:	08 95       	ret

0000016a <lcd_NumPrint>:
	}
}
void lcd_NumPrint(int a) {
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	4c 01       	movw	r8, r24
	lcd_cmd(clearLCD);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9f e1       	ldi	r25, 0x1F	; 31
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_NumPrint+0x20>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_NumPrint+0x26>
 190:	00 00       	nop
	_delay_ms(2);
	uint32_t q,r;
	int i=0;
	q=a;
 192:	09 2c       	mov	r0, r9
 194:	00 0c       	add	r0, r0
 196:	aa 08       	sbc	r10, r10
 198:	bb 08       	sbc	r11, r11
	if(q%10==0){
 19a:	c5 01       	movw	r24, r10
 19c:	b4 01       	movw	r22, r8
 19e:	2a e0       	ldi	r18, 0x0A	; 10
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	0e 94 57 02 	call	0x4ae	; 0x4ae <__udivmodsi4>
 1aa:	67 2b       	or	r22, r23
 1ac:	68 2b       	or	r22, r24
 1ae:	69 2b       	or	r22, r25
 1b0:	19 f5       	brne	.+70     	; 0x1f8 <lcd_NumPrint+0x8e>
		lcd_curPos(1,15-i);
 1b2:	6f e0       	ldi	r22, 0x0F	; 15
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
		lcd_data((uint8_t)48);
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_data>
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <lcd_NumPrint+0xa6>
	}
	else
	{
		while(q) {
			r=q%10;
			q=q/10;
 1c2:	c5 01       	movw	r24, r10
 1c4:	b4 01       	movw	r22, r8
 1c6:	2a e0       	ldi	r18, 0x0A	; 10
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	0e 94 57 02 	call	0x4ae	; 0x4ae <__udivmodsi4>
 1d2:	49 01       	movw	r8, r18
 1d4:	5a 01       	movw	r10, r20
			r+=48;
 1d6:	6b 01       	movw	r12, r22
 1d8:	7c 01       	movw	r14, r24
 1da:	20 e3       	ldi	r18, 0x30	; 48
 1dc:	c2 0e       	add	r12, r18
 1de:	d1 1c       	adc	r13, r1
 1e0:	e1 1c       	adc	r14, r1
 1e2:	f1 1c       	adc	r15, r1
			lcd_curPos(1,15-i);
 1e4:	6f e0       	ldi	r22, 0x0F	; 15
 1e6:	6c 1b       	sub	r22, r28
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
			lcd_data((uint8_t)r);
 1ee:	8c 2d       	mov	r24, r12
 1f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_data>
			i++;
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <lcd_NumPrint+0x92>
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_curPos(1,15-i);
		lcd_data((uint8_t)48);
	}
	else
	{
		while(q) {
 1fc:	81 14       	cp	r8, r1
 1fe:	91 04       	cpc	r9, r1
 200:	a1 04       	cpc	r10, r1
 202:	b1 04       	cpc	r11, r1
 204:	f1 f6       	brne	.-68     	; 0x1c2 <lcd_NumPrint+0x58>
			r+=48;
			lcd_curPos(1,15-i);
			lcd_data((uint8_t)r);
			i++;
		}
		lcd_curPos(1,15-i);
 206:	6f e0       	ldi	r22, 0x0F	; 15
 208:	6c 1b       	sub	r22, r28
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
	}
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	bf 90       	pop	r11
 21e:	af 90       	pop	r10
 220:	9f 90       	pop	r9
 222:	8f 90       	pop	r8
 224:	08 95       	ret

00000226 <lcd_FloatingPrint>:
			lcd_NumPrint(coffee_types[item].price);
			_delay_ms(1000);
		}*/
    }
}
void lcd_FloatingPrint(char* txt) {
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	60 97       	sbiw	r28, 0x10	; 16
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	8c 01       	movw	r16, r24
	char dispArr[16];
	uint8_t mainIndex=0;
 242:	f1 2c       	mov	r15, r1
	char* dispText;

	while(mainIndex<47) {
 244:	3a c0       	rjmp	.+116    	; 0x2ba <lcd_FloatingPrint+0x94>
		dispText = txt;
			for(uint8_t i=0;i<16;i++) {
				if(dispText){dispArr[i] = *dispText++;}
 246:	30 97       	sbiw	r30, 0x00	; 0
 248:	51 f0       	breq	.+20     	; 0x25e <lcd_FloatingPrint+0x38>
 24a:	90 81       	ld	r25, Z
 24c:	a1 e0       	ldi	r26, 0x01	; 1
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	ac 0f       	add	r26, r28
 252:	bd 1f       	adc	r27, r29
 254:	a8 0f       	add	r26, r24
 256:	b1 1d       	adc	r27, r1
 258:	9c 93       	st	X, r25
 25a:	31 96       	adiw	r30, 0x01	; 1
 25c:	08 c0       	rjmp	.+16     	; 0x26e <lcd_FloatingPrint+0x48>
				else{dispArr[i]=' ';}
 25e:	a1 e0       	ldi	r26, 0x01	; 1
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	ac 0f       	add	r26, r28
 264:	bd 1f       	adc	r27, r29
 266:	a8 0f       	add	r26, r24
 268:	b1 1d       	adc	r27, r1
 26a:	90 e2       	ldi	r25, 0x20	; 32
 26c:	9c 93       	st	X, r25
	uint8_t mainIndex=0;
	char* dispText;

	while(mainIndex<47) {
		dispText = txt;
			for(uint8_t i=0;i<16;i++) {
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_FloatingPrint+0x50>
 272:	f8 01       	movw	r30, r16
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	80 31       	cpi	r24, 0x10	; 16
 278:	30 f3       	brcs	.-52     	; 0x246 <lcd_FloatingPrint+0x20>
				if(dispText){dispArr[i] = *dispText++;}
				else{dispArr[i]=' ';}
			}
			lcd_print(dispArr);
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
			if(mainIndex!=0) {
 282:	ff 20       	and	r15, r15
 284:	51 f0       	breq	.+20     	; 0x29a <lcd_FloatingPrint+0x74>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	84 e3       	ldi	r24, 0x34	; 52
 28a:	9c e0       	ldi	r25, 0x0C	; 12
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <lcd_FloatingPrint+0x66>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_FloatingPrint+0x70>
 296:	00 00       	nop
 298:	09 c0       	rjmp	.+18     	; 0x2ac <lcd_FloatingPrint+0x86>
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	83 ed       	ldi	r24, 0xD3	; 211
 29e:	90 e3       	ldi	r25, 0x30	; 48
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <lcd_FloatingPrint+0x7a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_FloatingPrint+0x84>
 2aa:	00 00       	nop
				_delay_ms(250);	
			}
			else {
				_delay_ms(1000);
			}
			lcd_curPos(1,0);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
			mainIndex++;
 2b4:	f3 94       	inc	r15
			txt++;
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_FloatingPrint(char* txt) {
	char dispArr[16];
	uint8_t mainIndex=0;
	char* dispText;

	while(mainIndex<47) {
 2ba:	2e e2       	ldi	r18, 0x2E	; 46
 2bc:	2f 15       	cp	r18, r15
 2be:	c8 f6       	brcc	.-78     	; 0x272 <lcd_FloatingPrint+0x4c>
			}
			lcd_curPos(1,0);
			mainIndex++;
			txt++;
	}
}
 2c0:	60 96       	adiw	r28, 0x10	; 16
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	08 95       	ret

000002d8 <menu_nav>:
int menu_nav() {
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
	int8_t choice = -1,navIndex=0;
 2dc:	c0 e0       	ldi	r28, 0x00	; 0
 2de:	df ef       	ldi	r29, 0xFF	; 255
	
	while(choice == -1) {
 2e0:	38 c0       	rjmp	.+112    	; 0x352 <menu_nav+0x7a>
		if(_switch_up_){navIndex++;while(_switch_up_);}
 2e2:	b7 99       	sbic	0x16, 7	; 22
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <menu_nav+0x16>
 2e6:	cf 5f       	subi	r28, 0xFF	; 255
 2e8:	b7 9b       	sbis	0x16, 7	; 22
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <menu_nav+0x10>
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <menu_nav+0x20>
		else if(_switch_down_) {navIndex--;while(_switch_down_);}
 2ee:	b6 99       	sbic	0x16, 6	; 22
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <menu_nav+0x20>
 2f2:	c1 50       	subi	r28, 0x01	; 1
 2f4:	b6 9b       	sbis	0x16, 6	; 22
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <menu_nav+0x1c>
		if(navIndex>6){navIndex=0;}
 2f8:	c7 30       	cpi	r28, 0x07	; 7
 2fa:	0c f0       	brlt	.+2      	; 0x2fe <menu_nav+0x26>
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
		if(navIndex<0){navIndex=6;}
 2fe:	cc 23       	and	r28, r28
 300:	0c f4       	brge	.+2      	; 0x304 <menu_nav+0x2c>
 302:	c6 e0       	ldi	r28, 0x06	; 6
		lcd_curPos(1,0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
		lcd_print(coffee_types[navIndex].coffee_name);		
 30c:	8c 2f       	mov	r24, r28
 30e:	0c 2e       	mov	r0, r28
 310:	00 0c       	add	r0, r0
 312:	99 0b       	sbc	r25, r25
 314:	fc 01       	movw	r30, r24
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	8e 0f       	add	r24, r30
 31c:	9f 1f       	adc	r25, r31
 31e:	fc 01       	movw	r30, r24
 320:	e0 5a       	subi	r30, 0xA0	; 160
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	91 81       	ldd	r25, Z+1	; 0x01
 328:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
		while(!_switch_up_ & !_switch_down_ & !_switch_ok_);
 32c:	86 b3       	in	r24, 0x16	; 22
 32e:	96 b3       	in	r25, 0x16	; 22
 330:	96 fb       	bst	r25, 6
 332:	99 27       	eor	r25, r25
 334:	90 f9       	bld	r25, 0
 336:	88 1f       	adc	r24, r24
 338:	88 27       	eor	r24, r24
 33a:	88 1f       	adc	r24, r24
 33c:	89 23       	and	r24, r25
 33e:	96 b3       	in	r25, 0x16	; 22
 340:	95 fb       	bst	r25, 5
 342:	99 27       	eor	r25, r25
 344:	90 f9       	bld	r25, 0
 346:	88 23       	and	r24, r24
 348:	11 f0       	breq	.+4      	; 0x34e <menu_nav+0x76>
 34a:	91 11       	cpse	r25, r1
 34c:	ef cf       	rjmp	.-34     	; 0x32c <menu_nav+0x54>
		if(_switch_ok_){choice=navIndex;}
 34e:	b5 9b       	sbis	0x16, 5	; 22
 350:	dc 2f       	mov	r29, r28
	}
}
int menu_nav() {
	int8_t choice = -1,navIndex=0;
	
	while(choice == -1) {
 352:	df 3f       	cpi	r29, 0xFF	; 255
 354:	31 f2       	breq	.-116    	; 0x2e2 <menu_nav+0xa>
		lcd_print(coffee_types[navIndex].coffee_name);		
		while(!_switch_up_ & !_switch_down_ & !_switch_ok_);
		if(_switch_ok_){choice=navIndex;}
	}
	return choice;
 356:	8d 2f       	mov	r24, r29
 358:	dd 0f       	add	r29, r29
 35a:	99 0b       	sbc	r25, r25
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
uint8_t sw_up = 0;
void lcd_FloatingPrint(char*);
int menu_nav();
int main(void)
{	
	set_all(DDRA);
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	8a bb       	out	0x1a, r24	; 26
	set_all(DDRC);
 366:	84 bb       	out	0x14, r24	; 20
	clr_all(DDRB);
 368:	17 ba       	out	0x17, r1	; 23
	set_pin(PORTB,PINB7);
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	88 bb       	out	0x18, r24	; 24
	set_pin(PORTB,PINB6);
 370:	88 b3       	in	r24, 0x18	; 24
 372:	80 64       	ori	r24, 0x40	; 64
 374:	88 bb       	out	0x18, r24	; 24
	set_pin(PORTB,PINB5);
 376:	88 b3       	in	r24, 0x18	; 24
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	88 bb       	out	0x18, r24	; 24
	set_pin(PORTB,PINB4);
 37c:	88 b3       	in	r24, 0x18	; 24
 37e:	80 61       	ori	r24, 0x10	; 16
 380:	88 bb       	out	0x18, r24	; 24
	
	modes wlcm,menu,cnfrm;
	
	wlcm.mode_name = "Welcome!";
	wlcm.mode_status = valid;
 382:	d1 e0       	ldi	r29, 0x01	; 1
	
	menu.mode_name = "Menu";
	menu.mode_status = invalid;
 384:	c0 e0       	ldi	r28, 0x00	; 0
	
	cnfrm.mode_name = "Confirm order?";
	cnfrm.mode_status = invalid;
 386:	10 e0       	ldi	r17, 0x00	; 0
	
	__init_lcd_();
 388:	0e 94 6b 00 	call	0xd6	; 0xd6 <__init_lcd_>
	int selection = -1;
	flag confirmation=invalid;
	previtem=item;
 38c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 390:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 394:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <previtem+0x1>
 398:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <previtem>
	cnfrm.mode_name = "Confirm order?";
	cnfrm.mode_status = invalid;
	
	__init_lcd_();
	int selection = -1;
	flag confirmation=invalid;
 39c:	00 e0       	ldi	r16, 0x00	; 0
	
	cnfrm.mode_name = "Confirm order?";
	cnfrm.mode_status = invalid;
	
	__init_lcd_();
	int selection = -1;
 39e:	ee 24       	eor	r14, r14
 3a0:	ea 94       	dec	r14
 3a2:	fe 2c       	mov	r15, r14
	flag confirmation=invalid;
	previtem=item;
    while (1)  
    {
		//--main framework for the vending machine--
		if(wlcm.mode_status == valid){
 3a4:	d1 30       	cpi	r29, 0x01	; 1
 3a6:	51 f4       	brne	.+20     	; 0x3bc <main+0x5a>
			lcd_FloatingPrint("Welcome!        A project by Yashesvi(happikin)                ");
 3a8:	8b e7       	ldi	r24, 0x7B	; 123
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 13 01 	call	0x226	; 0x226 <lcd_FloatingPrint>
			lcd_cmd(clearLCD);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			wlcm.mode_status = invalid;
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
			menu.mode_status = valid;
 3b8:	c1 e0       	ldi	r28, 0x01	; 1
 3ba:	f4 cf       	rjmp	.-24     	; 0x3a4 <main+0x42>
		}
		else if(menu.mode_status == valid) {
 3bc:	c1 30       	cpi	r28, 0x01	; 1
 3be:	f1 f4       	brne	.+60     	; 0x3fc <main+0x9a>
			lcd_cmd(clearLCD);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_curPos(0,0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
			lcd_print("make a selection");
 3ce:	8b eb       	ldi	r24, 0xBB	; 187
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	8b e7       	ldi	r24, 0x7B	; 123
 3da:	92 e9       	ldi	r25, 0x92	; 146
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x7a>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x84>
 3e6:	00 00       	nop
			confirmation = invalid;
			selection = -1;
			_delay_ms(3000);
			selection = menu_nav();
 3e8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <menu_nav>
 3ec:	7c 01       	movw	r14, r24
			lcd_cmd(clearLCD);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			//if menu selection is done then 
			menu.mode_status = invalid;
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
			cnfrm.mode_status = valid;
 3f6:	11 e0       	ldi	r17, 0x01	; 1
		}
		else if(menu.mode_status == valid) {
			lcd_cmd(clearLCD);
			lcd_curPos(0,0);
			lcd_print("make a selection");
			confirmation = invalid;
 3f8:	00 e0       	ldi	r16, 0x00	; 0
 3fa:	d4 cf       	rjmp	.-88     	; 0x3a4 <main+0x42>
			lcd_cmd(clearLCD);
			//if menu selection is done then 
			menu.mode_status = invalid;
			cnfrm.mode_status = valid;
		}
		else if(cnfrm.mode_status == valid) {
 3fc:	11 30       	cpi	r17, 0x01	; 1
 3fe:	91 f6       	brne	.-92     	; 0x3a4 <main+0x42>
			lcd_cmd(clearLCD);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_NumPrint(selection);
 406:	c7 01       	movw	r24, r14
 408:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_NumPrint>
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	8d e3       	ldi	r24, 0x3D	; 61
 410:	99 e4       	ldi	r25, 0x49	; 73
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
			_delay_ms(1500);
			lcd_cmd(clearLCD);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_curPos(1,0);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
			lcd_print("PRESS OK/CANCEL");
 42c:	8c ec       	ldi	r24, 0xCC	; 204
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
			uint8_t choice = 0;
 434:	80 e0       	ldi	r24, 0x00	; 0
			while(!choice) {
 436:	09 c0       	rjmp	.+18     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				if(_switch_ok_) {
 438:	b5 9b       	sbis	0x16, 5	; 22
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					confirmation = valid;
					choice = 1;
				}
				else if(_switch_cancel_) {
 43c:	b4 99       	sbic	0x16, 4	; 22
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
					confirmation = invalid;
					choice = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
				if(_switch_ok_) {
					confirmation = valid;
					choice = 1;
				}
				else if(_switch_cancel_) {
					confirmation = invalid;
 442:	00 e0       	ldi	r16, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			lcd_print("PRESS OK/CANCEL");
			uint8_t choice = 0;
			while(!choice) {
				if(_switch_ok_) {
					confirmation = valid;
					choice = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
			lcd_curPos(1,0);
			lcd_print("PRESS OK/CANCEL");
			uint8_t choice = 0;
			while(!choice) {
				if(_switch_ok_) {
					confirmation = valid;
 448:	01 e0       	ldi	r16, 0x01	; 1
			_delay_ms(1500);
			lcd_cmd(clearLCD);
			lcd_curPos(1,0);
			lcd_print("PRESS OK/CANCEL");
			uint8_t choice = 0;
			while(!choice) {
 44a:	88 23       	and	r24, r24
 44c:	a9 f3       	breq	.-22     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					confirmation = invalid;
					choice = 1;
				}
			}
			
			if(confirmation == valid) {
 44e:	01 30       	cpi	r16, 0x01	; 1
 450:	a9 f4       	brne	.+42     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				lcd_cmd(clearLCD);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
				lcd_curPos(0,0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
				lcd_print("ORDER CONFIRMED!");
 460:	8c ed       	ldi	r24, 0xDC	; 220
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	87 ea       	ldi	r24, 0xA7	; 167
 46c:	91 e6       	ldi	r25, 0x61	; 97
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
 47a:	16 c0       	rjmp	.+44     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
				_delay_ms(2000);
			} else if(confirmation == invalid) {
 47c:	01 11       	cpse	r16, r1
 47e:	14 c0       	rjmp	.+40     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
				lcd_cmd(clearLCD);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
				lcd_curPos(0,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_curPos>
				lcd_print("ORDER CANCELLED!");
 48e:	8d ee       	ldi	r24, 0xED	; 237
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_print>
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	87 ea       	ldi	r24, 0xA7	; 167
 49a:	91 e6       	ldi	r25, 0x61	; 97
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
				_delay_ms(2000);
			}
			//if confirmed the selection then
			//display thank you!
			// if declined then
			cnfrm.mode_status = invalid;
 4a8:	10 e0       	ldi	r17, 0x00	; 0
			menu.mode_status = valid;
 4aa:	c1 e0       	ldi	r28, 0x01	; 1
 4ac:	7b cf       	rjmp	.-266    	; 0x3a4 <main+0x42>

000004ae <__udivmodsi4>:
 4ae:	a1 e2       	ldi	r26, 0x21	; 33
 4b0:	1a 2e       	mov	r1, r26
 4b2:	aa 1b       	sub	r26, r26
 4b4:	bb 1b       	sub	r27, r27
 4b6:	fd 01       	movw	r30, r26
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__udivmodsi4_ep>

000004ba <__udivmodsi4_loop>:
 4ba:	aa 1f       	adc	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	ee 1f       	adc	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	a2 17       	cp	r26, r18
 4c4:	b3 07       	cpc	r27, r19
 4c6:	e4 07       	cpc	r30, r20
 4c8:	f5 07       	cpc	r31, r21
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <__udivmodsi4_ep>
 4cc:	a2 1b       	sub	r26, r18
 4ce:	b3 0b       	sbc	r27, r19
 4d0:	e4 0b       	sbc	r30, r20
 4d2:	f5 0b       	sbc	r31, r21

000004d4 <__udivmodsi4_ep>:
 4d4:	66 1f       	adc	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	1a 94       	dec	r1
 4de:	69 f7       	brne	.-38     	; 0x4ba <__udivmodsi4_loop>
 4e0:	60 95       	com	r22
 4e2:	70 95       	com	r23
 4e4:	80 95       	com	r24
 4e6:	90 95       	com	r25
 4e8:	9b 01       	movw	r18, r22
 4ea:	ac 01       	movw	r20, r24
 4ec:	bd 01       	movw	r22, r26
 4ee:	cf 01       	movw	r24, r30
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
